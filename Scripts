1. DATA CLEANING 
-- Load the dataset
SELECT * FROM healthcare_dataset;

-- Handling missing values (example)
-- Replace NULLs in 'column_name' with a default value
UPDATE healthcare_dataset
SET column_name = 'default_value'
WHERE column_name IS NULL;

-- Removing duplicates
DELETE FROM healthcare_dataset
WHERE rowid NOT IN (
  SELECT MIN(rowid)
  FROM healthcare_dataset
  GROUP BY column_name1, column_name2, ...
);

-- Standarizing names (Example)
-- Convert names to a consistent case and trim extra spaces
UPDATE healthcare_dataset 
SET name = TRIM(INITCAP(REGEXP_REPLACE(name, '[^a-zA-Z\s]', '', 'g')));

-- Standardizing formats (example)
-- Convert dates to a standard format
UPDATE healthcare_dataset
SET date_column = TO_DATE(date_column, 'MM/DD/YYYY');

2. DATA EXPLORATION

-- Descriptive statistics
SELECT
  COUNT(*) AS total_records,
  AVG(numeric_column) AS average_value,
  MIN(numeric_column) AS min_value,
  MAX(numeric_column) AS max_value
FROM healthcare_dataset;

-- Distribution of a categorical column
SELECT
  categorical_column,
  COUNT(*) AS count
FROM healthcare_dataset
GROUP BY categorical_column;

3. AGGREGATION

-- Summarize data by a specific dimension (e.g., month)
SELECT
  DATE_TRUNC('month', date_column) AS month,
  COUNT(*) AS patient_count,
  AVG(cost) AS average_cost
FROM healthcare_dataset
GROUP BY month;

4. JOINS

-- Assuming there is another table 'patient_info'
SELECT
  h.*,
  p.patient_name,
  p.patient_age
FROM healthcare_dataset h
JOIN patient_info p ON h.patient_id = p.patient_id;

5. WINDOW FUNCTIONS 

-- Calculate the running total of a numeric column
SELECT
  *,
  SUM(numeric_column) OVER (ORDER BY date_column) AS running_total
FROM healthcare_dataset;

-- Calculate the average cost per patient over the last 7 days
SELECT
  *,
  AVG(cost) OVER (PARTITION BY patient_id ORDER BY date_column ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS avg_cost_last_7_days
FROM healthcare_dataset;

6. DATA ANALYSIS 

-- Identify age distribution and health conditions 
-- Understanding the distribution of medical conditions across different age groups can help in targeting preventive measures.
SELECT 
  Age, COUNT(*) as PatientCount, Medical_Condition
FROM healthcare_data
GROUP BY Age, Medical_Condition
ORDER BY Age;

-- Identify gender and medical conditions
-- Analyzing the prevalence of medical conditions by gender can assist in gender-specific healthcare initiatives.
SELECT 
  Gender, Medical_Condition, COUNT(*) as PatientCount
FROM healthcare_data
GROUP BY Gender, Medical_Condition
ORDER BY Gender, Medical_Condition;

-- Monthly trend of patient visits
-- Identifying the pattern of patient visits can help prepare proper treatments for patients 
SELECT
  DATE_TRUNC('month', date_column) AS month,
  COUNT(*) AS visit_count
FROM healthcare_dataset
GROUP BY month
ORDER BY month;

-- Hospital and admission types 
-- Assessing which hospitals handle more emergency cases versus elective admissions can help in resource allocation.
SELECT Hospital, Admission_Type, COUNT(*) as AdmissionCount
FROM healthcare_data
GROUP BY Hospital, Admission_Type
ORDER BY Hospital, Admission_Type;

-- Identify readmission rates 
-- Identifying the readmission rates by checking the same patients with multiple admission records can provide insights into healthcare quality.
SELECT 
  Name, COUNT(*) as AdmissionCount
FROM healthcare_data
GROUP BY Name
HAVING COUNT(*) > 1
ORDER BY AdmissionCount DESC;

-- Analyze discharge outcomes
-- Analyzing the correlation between admission types and discharge outcomes can improve patient care plans.
SELECT Admission_Type, Test_Results, COUNT(*) as OutcomeCount
FROM healthcare_data
GROUP BY Admission_Type, Test_Results
ORDER BY Admission_Type, Test_Results;

-- Analyze medication effectiveness
-- Investigating the effectiveness of medications based on test results can guide medication policies.
SELECT Medication, Test_Results, COUNT(*) as OutcomeCount
FROM healthcare_data
GROUP BY Medication, Test_Results
ORDER BY Medication, Test_Results;

7. DEFINING A TABLE SCHEMA

-- Example of creating tables with columns 
CREATE TABLE healthcare_dataset (
    patient_id SERIAL PRIMARY KEY,
    visit_date DATE NOT NULL,
    department VARCHAR(50) NOT NULL,
    treatment_cost NUMERIC(10, 2) NOT NULL,
    treatment_type VARCHAR(100),
    patient_age INTEGER,
    patient_gender CHAR(1) CHECK (patient_gender IN ('M', 'F')),
    patient_zip_code VARCHAR(10)
);
